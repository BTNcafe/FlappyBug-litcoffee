//1392486655000
(function() {
  FlappyBug.GameView = CLASS({
    statics: function(cls) {
      cls.gameWidth = 360;
      return cls.gameHeight = 480;
    },
    preset: function() {
      return VIEW;
    },
    init: function(cls, inner, self) {
      var bgm, bug, center, close, countPanel, createPipeInterval, endModal, ground, isGameOver, isStarted, keydownEvent, passPipeCount, pipes, resizeEvent, scoreStore, startGame, startPanel, surface, updateCanvasLoop, wrapper;
      bgm = SOUND({
        mp3: FlappyBug.R_URI('bgm.mp3'),
        ogg: FlappyBug.R_URI('bgm.ogg'),
        isLoop: true
      }).play();
      scoreStore = FlappyBug.STORE('score');
      passPipeCount = 0;
      isStarted = void 0;
      isGameOver = void 0;
      createPipeInterval = void 0;
      endModal = void 0;
      pipes = [];
      TITLE('FlappyBug :: Game');
      wrapper = DIV({
        style: {
          position: 'absolute',
          left: 0,
          top: 0,
          width: '100%',
          height: '100%'
        },
        childs: [
          surface = USCREEN.SURFACE({
            style: {
              position: 'absolute',
              left: 0,
              top: 0
            }
          }), startPanel = UUI.V_CENTER({
            wrapperStyle: {
              position: 'absolute',
              left: 0,
              top: 0,
              width: '100%',
              height: '100%'
            },
            childs: [
              UUI.PANEL({
                wrapperStyle: {
                  width: 150,
                  margin: 'auto',
                  backgroundColor: '#73BE31',
                  border: '5px solid #666'
                },
                contentStyle: {
                  padding: 10
                },
                childs: [
                  P({
                    style: {
                      fontSize: 12
                    },
                    childs: [BROWSER_CONFIG.USCREEN === void 0 || BROWSER_CONFIG.USCREEN.isLayerOnCanvas === true ? 'HTML5 Canvas Mode' : 'DOM Mode']
                  }), P({
                    childs: ['BEST SCORE: ', scoreStore.get('best' === void 0) ? 0 : scoreStore.get('best')]
                  }), P({
                    style: {
                      fontSize: 12
                    },
                    childs: ['TOUCH or\nSPACE KEY/CLICK\nto START!']
                  })
                ]
              })
            ]
          }), countPanel = DIV({
            style: {
              position: 'absolute',
              left: 0,
              top: 0,
              textAlign: 'center',
              zIndex: 999,
              width: '100%',
              fontSize: 20,
              marginTop: 10
            },
            childs: [0]
          })
        ],
        on: {
          touchstart: function(e) {
            if (isStarted !== true) {
              isStarted = true;
              startGame();
            }
            bug.jump();
            return e.stop();
          }
        }
      }).appendTo(BODY);
      ANIMATE({
        node: startPanel,
        keyframes: KEYFRAMES({
          from: {
            transform: 'scaleY(0)'
          },
          to: {
            transform: 'scaleY(100%)'
          }
        }),
        duration: 0.2,
        timingFunction: 'ease-out'
      });
      surface.setSize({
        width: cls.gameWidth,
        height: cls.gameHeight
      });
      center = USCREEN.LAYER().appendTo(surface);
      USCREEN.LAYER({
        img: IMG({
          src: FlappyBug.R_URI('sky.jpg')
        })
      }).appendTo(center);
      ground = FlappyBug.Game.Ground().appendTo(center);
      bug = FlappyBug.Game.Bug(function() {
        var buttonStyle;
        isGameOver = true;
        bgm.stop();
        ground.removeGroundLoop();
        clearInterval(createPipeInterval);
        EACH(pipes, function(pipe) {
          return pipe.removeMoveLoop();
        });
        if (scoreStore.get('best') === void 0 || (parseInt(scoreStore.get('best'), 10)) < passPipeCount) {
          scoreStore.save({
            key: 'best',
            value: passPipeCount
          });
        }
        endModal = UUI.MODAL({
          wrapperStyle: {
            width: 200,
            margin: 'auto',
            backgroundColor: '#73BE31',
            border: '5px solid #666'
          },
          contentStyle: {
            padding: 10
          },
          isCannotClose: true,
          childs: [
            P({
              childs: ['YOUR SCORE: ', passPipeCount]
            }), P({
              childs: ['BEST SCORE: ', scoreStore.get('best')]
            }), UUI.BUTTON({
              style: buttonStyle = {
                marginTop: 10,
                padding: 10,
                backgroundColor: '#fff',
                color: '#666',
                borderRadius: 10
              },
              title: 'HOME',
              onTap: function() {
                return FlappyBug.GO('');
              }
            }), UUI.BUTTON({
              style: buttonStyle,
              title: 'RESTART',
              onTap: function() {
                return FlappyBug.GO('Restart');
              }
            }), P({
              style: {
                marginTop: 10,
                fontSize: 12
              },
              childs: ['or SPACE KEY to RESTART.']
            }), Facebook.LikeButton({
              style: {
                marginTop: 10
              },
              href: 'http://flappybug.uppercase.io',
              layout: 'button_count'
            })
          ]
        });
        return ANIMATE({
          node: endModal,
          keyframes: KEYFRAMES({
            from: {
              transform: 'scaleY(0)'
            },
            to: {
              transform: 'scaleY(100%)'
            }
          }),
          duration: 0.2,
          timingFunction: 'ease-out'
        });
      }).appendTo(center);
      startGame = function() {
        ANIMATE({
          node: startPanel,
          keyframes: KEYFRAMES({
            from: {
              transform: 'scaleY(100%)'
            },
            to: {
              transform: 'scaleY(0)'
            }
          }),
          duration: 0.2,
          timingFunction: 'ease-in'
        }, function() {
          return startPanel.remove();
        });
        return createPipeInterval = setInterval(function() {
          return pipes.push((FlappyBug.Game.Pipe({
            pipes: pipes,
            bug: bug
          }, function() {
            passPipeCount += 1;
            countPanel.removeAllChilds();
            return countPanel.append(passPipeCount);
          })).appendTo(center));
        }, 2000);
      };
      keydownEvent = EVENT({
        name: 'keydown'
      }, function(e) {
        if (e.getKeyCode() === 32) {
          if (isStarted !== true) {
            isStarted = true;
            startGame();
          }
          bug.jump();
          if (isGameOver === true) {
            FlappyBug.GO('Restart');
          }
          return e.stop();
        }
      });
      resizeEvent = EVENT({
        name: 'resize'
      }, RAR(function() {
        var scale, size, wrapperHeight, wrapperWidth;
        wrapperWidth = wrapper.getWidth();
        wrapperHeight = wrapper.getHeight();
        scale = wrapperWidth / cls.gameWidth < wrapperHeight / cls.gameHeight ? wrapperWidth / cls.gameWidth : wrapperHeight / cls.gameHeight;
        size = surface.setScale(scale);
        surface.addStyle({
          left: (wrapperWidth - size.width) / 2,
          top: (wrapperHeight - size.height) / 2
        });
        return countPanel.addStyle({
          top: (wrapperHeight - size.height) / 2
        });
      }));
      updateCanvasLoop = LOOP(function() {
        return center.updateCanvas();
      });
      return self.close = close = function(params) {
        TITLE(CONFIG.defaultTitle);
        wrapper.remove();
        if (endModal !== void 0) {
          ANIMATE({
            node: endModal,
            keyframes: KEYFRAMES({
              from: {
                transform: 'scaleY(100%)'
              },
              to: {
                transform: 'scaleY(0)'
              }
            }),
            duration: 0.2,
            timingFunction: 'ease-in'
          }, function() {
            return endModal.remove();
          });
        }
        updateCanvasLoop.remove();
        clearInterval(createPipeInterval);
        keydownEvent.remove();
        resizeEvent.remove();
        if (isGameOver !== true) {
          return bgm.stop();
        }
      };
    }
  });

}).call(this);
